"use client";
// import type { Metadata } from "next";
import localFont from "next/font/local";
import ThemeProvider from "../providers/ThemeProvider";
import GlobalStyles from "./globalStyles";
import { Box } from "@mui/material";
import Script from "next/script";
import { SnackbarProvider } from "notistack";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import { useState } from "react";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});
const pretendard = localFont({
  src: "./fonts/PretendardVariable.woff2",
  variable: "--font-pretendard",
  weight: "100 900",
});
const cookierun = localFont({
  src: "./fonts/CookieRun-Regular.woff",
  variable: "--font-cookierun",
  weight: "100 900",
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // QueryClient를 useState로 생성하여 리렌더링 시 새로운 인스턴스가 생성되지 않도록 함
  const [queryClient] = useState(
    () =>
      new QueryClient({
        defaultOptions: {
          queries: {
            staleTime: 1000 * 60 * 5, // 5분
            gcTime: 1000 * 60 * 10, // 10분 (구 cacheTime)
          },
        },
      })
  );

  return (
    <html lang="en">
      <head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, shrink-to-fit=no"
        />
        <Script
          src={`//dapi.kakao.com/v2/maps/sdk.js?appkey=${process.env.NEXT_PUBLIC_KAKAO_APP_JS_KEY}&libraries=services,clusterer&autoload=false`}
          strategy="beforeInteractive"
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${pretendard.variable} ${cookierun.variable} antialiased`}
      >
        <GlobalStyles />
        <QueryClientProvider client={queryClient}>
          <ThemeProvider>
            <SnackbarProvider maxSnack={3}>
              <Box
                sx={{
                  width: "100%",
                  minWidth: "320px",
                  maxWidth: "768px",
                  minHeight: "100vh",
                  overflow: "hidden",
                  mx: "auto",
                  userSelect: "none",
                }}
              >
                {children}
              </Box>
            </SnackbarProvider>
          </ThemeProvider>
          <ReactQueryDevtools initialIsOpen={false} />
        </QueryClientProvider>
      </body>
    </html>
  );
}
